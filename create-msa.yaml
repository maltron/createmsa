#!/usr/bin/env ansible-playbook
---
- name: Creating MicroService structure, directories and all the necessary files
  hosts: localhost
  connection: local
  vars:
     package_name: net.nortlam.example
     project_name: usermanagement
     directory: /tmp/msa
     broker_namespace: activemq
     broker_service: activemq-amq
     broker_topics: "alpha, bravo" 
     broker_queues: "first, second" 
  tasks:
     - name: Running a simple Maven Command
       command: mvn --version
       register: maven_response
       ignore_errors: True
       tags: maven

     - name: Does Maven exists ?
       fail: msg="Maven Command not found. Please install it. http://maven.apache.org/download.cgi"
       when: maven_response.rc != 0
       tags: maven

     - name: Running OpenShift's Client Command
       command: oc version
       register: oc_response
       ignore_errors: True
       tags: openshift

     - name: Does OpenShift's Client exists ?
       fail: msg="OpenShift's Client not found. Please install it. https://access.redhat.com/downloads/content/290"
       when: oc_response.rc != 0
       tags: openshift

     - name: Check if there is any pods available on the broker
       command: oc get pods --namespace {{ broker_namespace }}
       register: pods_response
       ignore_errors: True
       tags:
          - broker

     - fail: msg="Please login into OpenShift first. oc login --username=myuser --insecure-skip-tls-verify --server=https{{ ':' }}//openshift.example.com{{ ':' }}8443"
       when: '"system:anonymous" in pods_response.stderr'
       tags:
          - broker

     - fail: msg="No Pods found. Please make sure there is a Broker runing in Namespace{{ ':' }}{{ broker_namespace }}  Service{{ ':' }}{{ broker_service }}"
       when: pods_response.stdout_lines | length == 0
       tags: 
          - broker

     - name: Obtaining Broker's IP
       command: oc get services --namespace {{ broker_namespace }} --output jsonpath='{.items[?(@.metadata.name=="{{ broker_service }}-tcp")].spec.clusterIP}'
       register: broker_ip
       tags:
          - broker

     - name: Objtaining Broker's Username
       command: oc get deploymentconfig/{{ broker_service }} --namespace {{ broker_namespace }} --output jsonpath='{$..env[?(@.name=="AMQ_USER")].value}'
       register: broker_username
       tags:
          - broker

     - name: Obtaining Broker's Password
       command: oc get deploymentconfig/{{ broker_service }} --namespace {{ broker_namespace }} --output jsonpath='{$..env[?(@.name=="AMQ_PASSWORD")].value}'
       register: broker_password
       tags:
          - broker

     - debug: msg=">>> Broker's IP{{ ':' }} {{ broker_ip.stdout }} Username{{ ':' }} {{ broker_username.stdout }}  Password{{ ':' }} {{ broker_password.stdout }}" 
       tags: 
          - broker

     - name: Create a variable where the destination will be
       set_fact: microservice_destination={{ directory }}/{{ project_name }}

     - name: Creating all the necessary directory structure
       file: path={{ microservice_destination }}/{{ item }} state=directory
       with_items:
         - bin 
         - conf
         - src/main/resources/META-INF
         - src/main/webapp/WEB-INF
         - src/main/java/

     - name: Directory where all the source code will be
       set_fact: java_source_code={{ microservice_destination }}/src/main/java/{{ package_name | regex_replace("\.", "/") }}

     - name: Create Source Code Directory based on Project's Package
       file: path={{ java_source_code }} state=directory

     - name: Create Subdirectories for the Source Code to be generated
       file: path={{ java_source_code}}/{{ item }} state=directory
       with_items:
         - error
         - setup
         - entity
         - jms

     - name: Source Code{{ ':' }} Java
       template: src=template/src/main/java/net/nortlam/template/{{ item }}.j2
                 dest={{ java_source_code }}/{{ item }} 
       with_items:
         - error/NotFoundMapper.java
         - error/ServerInternalErrorMapper.java
         - error/NoContentMapper.java
         - error/ServerInternalErrorException.java
         - error/NotFoundException.java
         - error/NoContentException.java
         - Service.java
         - Resource.java
         - entity/Country.java
         - setup/MongoProvider.java
         - setup/RESTEnabled.java

     - name: Source Code for Topics (if any)
       template: src=template/src/main/java/net/nortlam/template/jms/TopicAlpha.java.j2
                 dest={{ java_source_code }}/jms/Topic{{ item | title | trim }}.java
       with_items: "{{ broker_topics.split(',') }}"
       when: broker_topics is defined

     - name: Source Code for Queues (if any)
       template: src=template/src/main/java/net/nortlam/template/jms/QueueAlpha.java.j2
                 dest={{ java_source_code }}/jms/Queue{{ item | title | trim }}.java
       with_items: "{{ broker_queues.split(',') }}"
       when: broker_queues is defined

     - name: Source Code{{ ':' }} Everything else
       template: src=template/{{ item }}.j2
                 dest={{ microservice_destination }}/{{ item }}
       with_items:
         - pom.xml
         - .gitignore
         - src/main/webapp/index.html
         - src/main/webapp/WEB-INF/beans.xml
         - src/main/webapp/WEB-INF/jboss-web.xml
         - src/main/webapp/WEB-INF/web.xml
         - nb-configuration.xml
         - bin/openshift-logs-database.sh
         - bin/openshift-rsync.sh
         - bin/mongo-shell.sh
         - bin/test.sh
         - bin/openshift-logs-applicationserver.sh
         - bin/openshift-portforward.sh

     - name: Files in bin must be able to have Execution permission
       file: path={{ microservice_destination }}/bin/{{ item }} mode="a+x"
       with_items:
         - openshift-logs-database.sh
         - openshift-rsync.sh
         - mongo-shell.sh
         - test.sh
         - openshift-logs-applicationserver.sh
         - openshift-portforward.sh

     - name: Maven doing the first compilation
       command: mvn --file {{ microservice_destination }}/pom.xml clean package -DskipTests

     - name: Creating the project into OpenShift
       command: oc new-project {{ project_name }}
        
     - name: Creating the application with all the necessary Pods
       command: oc new-app wildfly-mongo --output yaml --param=APPLICATION_NAME={{ project_name }},BROKER_ADDRESS={{ broker_ip.stdout }},BROKER_USERNAME={{ broker_username.stdout }},BROKER_PASSWORD={{ broker_password.stdout }},BROKER_TOPICS=REPLACE_BROKER_TOPICS,BROKER_QUEUES=REPLACE_BROKER_QUEUES
       register: newapp_yaml
       tags: newapp

     - name: Copy the content generated into conf directory
       copy: content={{ newapp_yaml.stdout }} dest={{ microservice_destination }}/conf/{{ project_name }}-template.yaml
       tags: newapp

     - name: Replace marker REPLACE_BROKER_TOPICS with the actual Topics
       lineinfile: dest={{ microservice_destination }}/conf/{{ project_name }}-template.yaml
                   regexp="REPLACE_BROKER_TOPICS" line="            value{{ ':' }} {{ broker_topics}}"
       tags: newapp


     - name: Replace marker REPLACE_BROKER_QUEUES with the actual Queues
       lineinfile: dest={{ microservice_destination }}/conf/{{ project_name }}-template.yaml
                   regexp="REPLACE_BROKER_QUEUES" line="            value{{ ':' }} {{ broker_queues}}"
       tags: newapp

     - name: Finally, create all the resources 
       command: oc create --filename {{ microservice_destination }}/conf/{{ project_name }}-template.yaml --namespace {{ project_name }}
       tags: newapp
